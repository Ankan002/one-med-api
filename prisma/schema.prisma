generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum DoctorLicenceApprovalStatus {
  pending
  accepted
  declined
}

model Admin {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  email      String
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  username      String         @unique
  email         String         @unique
  provider_id   String         @unique
  profile_image String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  UserProfile   UserProfile[]
  PatientList   PatientList[]
  Prescription  Prescription[]
  Diagnosis     Diagnosis[]
  FollowUpDate  FollowUpDate[]
}

model UserProfile {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.Uuid
  mobile_number String?  @unique
  avatar        String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model DoctorLicenceStatus {
  id             String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  email          String                      @unique
  licence_number String                      @unique
  status         DoctorLicenceApprovalStatus @default(pending)
  created_at     DateTime                    @default(now())
  updated_at     DateTime                    @updatedAt
}

model Doctor {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  username       String          @unique
  email          String          @unique
  password       String
  licence_number String          @unique
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  DoctorProfile  DoctorProfile[]
  PatientList    PatientList[]
  Prescription   Prescription[]
  Diagnosis      Diagnosis[]
  FollowUpDate   FollowUpDate[]
}

model DoctorProfile {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  doctor        Doctor   @relation(fields: [doctorId], references: [id])
  doctorId      String   @db.Uuid
  mobile_number String?  @unique
  avatar        String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model PatientList {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  doctorId   String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Prescription {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user         User           @relation(fields: [userId], references: [id])
  userId       String         @db.Uuid
  doctor       Doctor         @relation(fields: [doctorId], references: [id])
  doctorId     String         @db.Uuid
  private      Boolean        @default(false)
  starred      Boolean        @default(false)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Diagnosis    Diagnosis[]
  FollowUpDate FollowUpDate[]
}

model Diagnosis {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prescription      Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId    String       @db.Uuid
  doctor            Doctor       @relation(fields: [doctorId], references: [id])
  doctorId          String       @db.Uuid
  user              User         @relation(fields: [userId], references: [id])
  userId            String       @db.Uuid
  diagnosed_disease String
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
}

model FollowUpDate {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  prescriptionId String       @db.Uuid
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.Uuid
  doctor         Doctor       @relation(fields: [doctorId], references: [id])
  doctorId       String       @db.Uuid
  date           String
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
}
